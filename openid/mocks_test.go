// Code generated by mockery v1.0.0
package openid

import (
	io "io"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	jose "gopkg.in/square/go-jose.v2"

	jwt "github.com/dgrijalva/jwt-go"
)

// mockSigningKeyGetter is an autogenerated mock type for the signingKeyGetter type
type mockSigningKeyGetter struct {
	mock.Mock
}

// flushCachedSigningKeys provides a mock function with given fields: issuer
func (_m *mockSigningKeyGetter) flushCachedSigningKeys(issuer string) error {
	ret := _m.Called(issuer)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(issuer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getSigningKey provides a mock function with given fields: r, issuer, kid
func (_m *mockSigningKeyGetter) getSigningKey(r *http.Request, issuer string, kid string) ([]byte, error) {
	ret := _m.Called(r, issuer, kid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*http.Request, string, string) []byte); ok {
		r0 = rf(r, issuer, kid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string, string) error); ok {
		r1 = rf(r, issuer, kid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockJwksGetter is an autogenerated mock type for the jwksGetter type
type mockJwksGetter struct {
	mock.Mock
}

// getJwkSet provides a mock function with given fields: r, url
func (_m *mockJwksGetter) get(r *http.Request, url string) (jose.JSONWebKeySet, error) {
	ret := _m.Called(r, url)

	var r0 jose.JSONWebKeySet
	if rf, ok := ret.Get(0).(func(*http.Request, string) jose.JSONWebKeySet); ok {
		r0 = rf(r, url)
	} else {
		r0 = ret.Get(0).(jose.JSONWebKeySet)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigurationGetter is an autogenerated mock type for the configurationGetter type
type mockConfigurationGetter struct {
	mock.Mock
}

// getConfiguration provides a mock function with given fields: r, url
func (_m *mockConfigurationGetter) get(r *http.Request, url string) (configuration, error) {
	ret := _m.Called(r, url)

	var r0 configuration
	if rf, ok := ret.Get(0).(func(*http.Request, string) configuration); ok {
		r0 = rf(r, url)
	} else {
		r0 = ret.Get(0).(configuration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockJwtTokenValidator is an autogenerated mock type for the jwtTokenValidator type
type mockJwtTokenValidator struct {
	mock.Mock
}

// validate provides a mock function with given fields: r, t
func (_m *mockJwtTokenValidator) validate(r *http.Request, t string) (*jwt.Token, error) {
	ret := _m.Called(r, t)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(*http.Request, string) *jwt.Token); ok {
		r0 = rf(r, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockJwtParser is an autogenerated mock type for the jwtParser type
type mockJwtParser struct {
	mock.Mock
}

// parse provides a mock function with given fields: _a0, _a1
func (_m *mockJwtParser) parse(_a0 string, _a1 jwt.Keyfunc) (*jwt.Token, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string, jwt.Keyfunc) *jwt.Token); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, jwt.Keyfunc) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigurationDecoder is an autogenerated mock type for the configurationDecoder type
type mockConfigurationDecoder struct {
	mock.Mock
}

// decode provides a mock function with given fields: _a0
func (_m *mockConfigurationDecoder) decode(_a0 io.Reader) (configuration, error) {
	ret := _m.Called(_a0)

	var r0 configuration
	if rf, ok := ret.Get(0).(func(io.Reader) configuration); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(configuration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockHttpGetter is an autogenerated mock type for the httpGetter type
type mockHttpGetter struct {
	mock.Mock
}

// get provides a mock function with given fields: r, url
func (_m *mockHttpGetter) get(r *http.Request, url string) (*http.Response, error) {
	ret := _m.Called(r, url)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request, string) *http.Response); ok {
		r0 = rf(r, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockJwksDecoder is an autogenerated mock type for the jwksDecoder type
type mockJwksDecoder struct {
	mock.Mock
}

// decode provides a mock function with given fields: _a0
func (_m *mockJwksDecoder) decode(_a0 io.Reader) (jose.JSONWebKeySet, error) {
	ret := _m.Called(_a0)

	var r0 jose.JSONWebKeySet
	if rf, ok := ret.Get(0).(func(io.Reader) jose.JSONWebKeySet); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(jose.JSONWebKeySet)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockPemEncoder struct {
	mock.Mock
}

// encode provides a mock function with given fields: key
func (_m *mockPemEncoder) encode(key interface{}) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockProvidersGetter is an autogenerated mock type for the providersGetter type
type mockProvidersGetter struct {
	mock.Mock
}

// get provides a mock function with given fields:
func (_m *mockProvidersGetter) get() ([]Provider, error) {
	ret := _m.Called()

	var r0 []Provider
	if rf, ok := ret.Get(0).(func() []Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
